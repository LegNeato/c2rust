---
source: pdg/src/main.rs
assertion_line: 155
expression: pdg
---
Graph:
 g {
	n[0]: copy _ => _10 @ bb5[4]: fn main; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: copy _ => _9 @ bb5[5]: fn main; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: copy _ => _19 @ bb8[11]: fn main; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: copy _ => _18 @ bb8[12]: fn main; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: copy _ => _27 @ bb8[22]: fn main; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: copy _ => _26 @ bb8[23]: fn main; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: copy _ => _23 @ bb13[4]: fn main; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: copy _ => _22 @ bb13[5]: fn main; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: copy _ => _29 @ bb15[11]: fn main; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: copy _ => _34 @ bb16[5]: fn main; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: copy _    => _30 @ bb18[0]: fn main; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy n[0] => _2  @ bb0[0]:  fn push; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: copy _ => _37 @ bb27[4]: fn main; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: copy        _    => _38       @ bb28[0]: fn main; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[1]: copy        n[0] => _2        @ bb0[0]:  fn push; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[2]: value.store _    => _20.Deref @ bb4[8]:  fn invalid; (mut n[2],no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: copy _ => _43 @ bb29[9]: fn main; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: copy _ => _46 @ bb31[6]: fn main; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: copy _    => _45 @ bb32[0]: fn main; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[1]: copy n[0] => _2  @ bb0[0]:  fn main_0; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: malloc(n = 1) _    => _2 @ bb1[2]: fn simple; (no mut,load n[3],no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy          n[0] => _1 @ bb2[2]: fn simple; (no mut,load n[3],no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: field.0       n[1] => _9 @ bb4[5]: fn simple; (no mut,load n[3],no flow to pos_offset,no flow to neg_offset,unique)
	n[3]: addr.load     n[2] => _  @ bb4[5]: fn simple; (no mut,load n[3],no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]:  malloc(n = 1) _     => _6  @ bb3[2]:  fn simple; (mut n[9],load n[16],no flow to pos_offset,no flow to neg_offset,unique)                     
	n[1]:  copy          n[0]  => _5  @ bb4[2]:  fn simple; (mut n[9],load n[15],no flow to pos_offset,no flow to neg_offset,non unique proven by n[16]) 
	n[2]:  copy          n[1]  => _10 @ bb4[9]:  fn simple; (mut n[18],load n[15],no flow to pos_offset,no flow to neg_offset,non unique proven by n[16])
	n[3]:  copy          n[2]  => _1  @ bb4[10]: fn simple; (mut n[18],load n[15],no flow to pos_offset,no flow to neg_offset,non unique proven by n[16])
	n[4]:  field.0       n[3]  => _   @ bb4[11]: fn simple; (mut n[5],no load,no flow to pos_offset,no flow to neg_offset,unique)                        
	n[5]:  addr.store    n[4]  => _   @ bb4[11]: fn simple; (mut n[5],no load,no flow to pos_offset,no flow to neg_offset,unique)                        
	n[6]:  field.0       n[3]  => _11 @ bb4[13]: fn simple; (no mut,load n[7],no flow to pos_offset,no flow to neg_offset,unique)                        
	n[7]:  addr.load     n[6]  => _   @ bb4[13]: fn simple; (no mut,load n[7],no flow to pos_offset,no flow to neg_offset,unique)                        
	n[8]:  field.0       n[1]  => _   @ bb4[14]: fn simple; (mut n[9],no load,no flow to pos_offset,no flow to neg_offset,unique)                        
	n[9]:  addr.store    n[8]  => _   @ bb4[14]: fn simple; (mut n[9],no load,no flow to pos_offset,no flow to neg_offset,unique)                        
	n[10]: field.1       n[3]  => _   @ bb4[16]: fn simple; (mut n[11],no load,no flow to pos_offset,no flow to neg_offset,unique)                       
	n[11]: addr.store    n[10] => _   @ bb4[16]: fn simple; (mut n[11],no load,no flow to pos_offset,no flow to neg_offset,unique)                       
	n[12]: field.0       n[3]  => _12 @ bb4[18]: fn simple; (no mut,load n[13],no flow to pos_offset,no flow to neg_offset,unique)                       
	n[13]: addr.load     n[12] => _   @ bb4[18]: fn simple; (no mut,load n[13],no flow to pos_offset,no flow to neg_offset,unique)                       
	n[14]: field.1       n[3]  => _13 @ bb4[21]: fn simple; (no mut,load n[15],no flow to pos_offset,no flow to neg_offset,unique)                       
	n[15]: addr.load     n[14] => _   @ bb4[21]: fn simple; (no mut,load n[15],no flow to pos_offset,no flow to neg_offset,unique)                       
	n[16]: addr.load     n[0]  => _   @ bb4[24]: fn simple; (no mut,load n[16],no flow to pos_offset,no flow to neg_offset,unique)                       
	n[17]: field.2       n[3]  => _   @ bb4[25]: fn simple; (mut n[18],no load,no flow to pos_offset,no flow to neg_offset,unique)                       
	n[18]: addr.store    n[17] => _   @ bb4[25]: fn simple; (mut n[18],no load,no flow to pos_offset,no flow to neg_offset,unique)                       
	n[19]: copy          n[3]  => _16 @ bb4[30]: fn simple; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)                          
	n[20]: copy          n[19] => _2  @ bb0[0]:  fn recur; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)                           
	n[21]: copy          n[20] => _13 @ bb8[4]:  fn recur; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)                           
	n[22]: copy          n[21] => _2  @ bb0[0]:  fn recur; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)                           
	n[23]: copy          n[22] => _13 @ bb8[4]:  fn recur; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)                           
	n[24]: copy          n[23] => _2  @ bb0[0]:  fn recur; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)                           
	n[25]: copy          n[24] => _13 @ bb8[4]:  fn recur; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)                           
	n[26]: copy          n[25] => _2  @ bb0[0]:  fn recur; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)                           
	n[27]: copy          n[26] => _8  @ bb1[3]:  fn recur; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)                           
	n[28]: copy          n[27] => _7  @ bb1[4]:  fn recur; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)                           
	n[29]: free          n[28] => _0  @ bb1[5]:  fn recur; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)                           
	n[30]: copy          n[26] => _14 @ bb9[5]:  fn recur; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)                           
	n[31]: copy          n[26] => _14 @ bb9[5]:  fn recur; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)                           
	n[32]: copy          n[26] => _14 @ bb9[5]:  fn recur; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)                           
}
nodes_that_need_write = [18, 17, 11, 10, 9, 8, 5, 4, 3, 2, 1, 0]

Graph:
 g {
	n[0]: &_1 _ => _9 @ bb4[6]: fn simple; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: &_1 _ => _13 @ bb4[22]: fn simple; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: &_1         _    => _14               @ bb4[25]: fn simple; (mut n[3],load n[2],no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: value.store n[0] => _1.Deref.Field(2) @ bb4[26]: fn simple; (mut n[1],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[2]: addr.load   n[0] => _                 @ bb5[3]:  fn simple; (no mut,load n[2],no flow to pos_offset,no flow to neg_offset,unique)  
	n[3]: addr.store  n[0] => _                 @ bb5[7]:  fn simple; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)  
}
nodes_that_need_write = [3, 0]

Graph:
 g {
	n[0]: malloc(n = 1) _    => _2  @ bb1[2]:  fn exercise_allocator; (mut n[3],load n[5],no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy          n[0] => _1  @ bb2[2]:  fn exercise_allocator; (mut n[3],load n[5],no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: field.0       n[1] => _   @ bb2[5]:  fn exercise_allocator; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[3]: addr.store    n[2] => _   @ bb2[5]:  fn exercise_allocator; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[4]: field.0       n[1] => _10 @ bb2[18]: fn exercise_allocator; (no mut,load n[5],no flow to pos_offset,no flow to neg_offset,unique)  
	n[5]: addr.load     n[4] => _   @ bb2[18]: fn exercise_allocator; (no mut,load n[5],no flow to pos_offset,no flow to neg_offset,unique)  
	n[6]: copy          n[1] => _13 @ bb3[8]:  fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
	n[7]: copy          n[6] => _12 @ bb3[9]:  fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
	n[8]: free          n[7] => _11 @ bb5[2]:  fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
}
nodes_that_need_write = [3, 2, 1, 0]

Graph:
 g {
	n[0]: &_9  _    => _8 @ bb2[13]: fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy n[0] => _7 @ bb2[14]: fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: copy n[1] => _6 @ bb2[16]: fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[3]: copy n[2] => _1 @ bb0[0]:  fn printf; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)            
}
nodes_that_need_write = []

Graph:
 g {
	n[0]:  malloc(n = 1) _     => _11 @ bb5[2]:   fn exercise_allocator; (mut n[9],load n[17],does flow to pos_offset,no flow to neg_offset,unique)
	n[1]:  copy          n[0]  => _1  @ bb6[3]:   fn exercise_allocator; (mut n[9],load n[17],does flow to pos_offset,no flow to neg_offset,unique)
	n[2]:  copy          n[1]  => _19 @ bb6[7]:   fn exercise_allocator; (mut n[5],no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[3]:  offset[0]     n[2]  => _18 @ bb6[7]:   fn exercise_allocator; (mut n[5],no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[4]:  field.0       n[3]  => _   @ bb7[1]:   fn exercise_allocator; (mut n[5],no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[5]:  addr.store    n[4]  => _   @ bb7[1]:   fn exercise_allocator; (mut n[5],no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[6]:  copy          n[1]  => _21 @ bb7[6]:   fn exercise_allocator; (mut n[9],no load,does flow to pos_offset,no flow to neg_offset,unique)   
	n[7]:  offset[1]     n[6]  => _20 @ bb7[6]:   fn exercise_allocator; (mut n[9],no load,does flow to pos_offset,no flow to neg_offset,unique)   
	n[8]:  field.0       n[7]  => _   @ bb8[1]:   fn exercise_allocator; (mut n[9],no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[9]:  addr.store    n[8]  => _   @ bb8[1]:   fn exercise_allocator; (mut n[9],no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[10]: copy          n[1]  => _34 @ bb11[15]: fn exercise_allocator; (no mut,load n[13],no flow to pos_offset,no flow to neg_offset,unique)    
	n[11]: offset[0]     n[10] => _33 @ bb11[20]: fn exercise_allocator; (no mut,load n[13],no flow to pos_offset,no flow to neg_offset,unique)    
	n[12]: field.0       n[11] => _32 @ bb13[2]:  fn exercise_allocator; (no mut,load n[13],no flow to pos_offset,no flow to neg_offset,unique)    
	n[13]: addr.load     n[12] => _   @ bb13[2]:  fn exercise_allocator; (no mut,load n[13],no flow to pos_offset,no flow to neg_offset,unique)    
	n[14]: copy          n[1]  => _34 @ bb11[15]: fn exercise_allocator; (no mut,load n[17],does flow to pos_offset,no flow to neg_offset,unique)  
	n[15]: offset[1]     n[14] => _33 @ bb11[20]: fn exercise_allocator; (no mut,load n[17],does flow to pos_offset,no flow to neg_offset,unique)  
	n[16]: field.0       n[15] => _32 @ bb13[2]:  fn exercise_allocator; (no mut,load n[17],no flow to pos_offset,no flow to neg_offset,unique)    
	n[17]: addr.load     n[16] => _   @ bb13[2]:  fn exercise_allocator; (no mut,load n[17],no flow to pos_offset,no flow to neg_offset,unique)    
	n[18]: copy          n[1]  => _43 @ bb21[7]:  fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)       
	n[19]: copy          n[18] => _42 @ bb21[8]:  fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)       
	n[20]: free          n[19] => _41 @ bb22[2]:  fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)       
}
nodes_that_need_write = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]

Graph:
 g {
	n[0]: &_31 _    => _30 @ bb11[7]:  fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy n[0] => _29 @ bb11[8]:  fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: copy n[1] => _28 @ bb11[10]: fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[3]: copy n[2] => _1  @ bb0[0]:   fn printf; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)            
}
nodes_that_need_write = []

Graph:
 g {
	n[0]:  malloc(n = 1) _     => _41 @ bb22[2]:  fn exercise_allocator; (mut n[13],load n[25],does flow to pos_offset,no flow to neg_offset,unique)
	n[1]:  copy          n[0]  => _1  @ bb23[4]:  fn exercise_allocator; (mut n[13],load n[25],does flow to pos_offset,no flow to neg_offset,unique)
	n[2]:  copy          n[1]  => _48 @ bb23[8]:  fn exercise_allocator; (mut n[5],no load,no flow to pos_offset,no flow to neg_offset,unique)      
	n[3]:  offset[0]     n[2]  => _47 @ bb23[8]:  fn exercise_allocator; (mut n[5],no load,no flow to pos_offset,no flow to neg_offset,unique)      
	n[4]:  field.0       n[3]  => _   @ bb24[1]:  fn exercise_allocator; (mut n[5],no load,no flow to pos_offset,no flow to neg_offset,unique)      
	n[5]:  addr.store    n[4]  => _   @ bb24[1]:  fn exercise_allocator; (mut n[5],no load,no flow to pos_offset,no flow to neg_offset,unique)      
	n[6]:  copy          n[1]  => _50 @ bb24[6]:  fn exercise_allocator; (mut n[9],no load,does flow to pos_offset,no flow to neg_offset,unique)    
	n[7]:  offset[1]     n[6]  => _49 @ bb24[6]:  fn exercise_allocator; (mut n[9],no load,does flow to pos_offset,no flow to neg_offset,unique)    
	n[8]:  field.0       n[7]  => _   @ bb25[1]:  fn exercise_allocator; (mut n[9],no load,no flow to pos_offset,no flow to neg_offset,unique)      
	n[9]:  addr.store    n[8]  => _   @ bb25[1]:  fn exercise_allocator; (mut n[9],no load,no flow to pos_offset,no flow to neg_offset,unique)      
	n[10]: copy          n[1]  => _52 @ bb25[6]:  fn exercise_allocator; (mut n[13],no load,does flow to pos_offset,no flow to neg_offset,unique)   
	n[11]: offset[2]     n[10] => _51 @ bb25[6]:  fn exercise_allocator; (mut n[13],no load,does flow to pos_offset,no flow to neg_offset,unique)   
	n[12]: field.0       n[11] => _   @ bb26[1]:  fn exercise_allocator; (mut n[13],no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[13]: addr.store    n[12] => _   @ bb26[1]:  fn exercise_allocator; (mut n[13],no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[14]: copy          n[1]  => _64 @ bb29[15]: fn exercise_allocator; (no mut,load n[17],no flow to pos_offset,no flow to neg_offset,unique)     
	n[15]: offset[0]     n[14] => _63 @ bb29[20]: fn exercise_allocator; (no mut,load n[17],no flow to pos_offset,no flow to neg_offset,unique)     
	n[16]: field.0       n[15] => _62 @ bb31[2]:  fn exercise_allocator; (no mut,load n[17],no flow to pos_offset,no flow to neg_offset,unique)     
	n[17]: addr.load     n[16] => _   @ bb31[2]:  fn exercise_allocator; (no mut,load n[17],no flow to pos_offset,no flow to neg_offset,unique)     
	n[18]: copy          n[1]  => _64 @ bb29[15]: fn exercise_allocator; (no mut,load n[21],does flow to pos_offset,no flow to neg_offset,unique)   
	n[19]: offset[1]     n[18] => _63 @ bb29[20]: fn exercise_allocator; (no mut,load n[21],does flow to pos_offset,no flow to neg_offset,unique)   
	n[20]: field.0       n[19] => _62 @ bb31[2]:  fn exercise_allocator; (no mut,load n[21],no flow to pos_offset,no flow to neg_offset,unique)     
	n[21]: addr.load     n[20] => _   @ bb31[2]:  fn exercise_allocator; (no mut,load n[21],no flow to pos_offset,no flow to neg_offset,unique)     
	n[22]: copy          n[1]  => _64 @ bb29[15]: fn exercise_allocator; (no mut,load n[25],does flow to pos_offset,no flow to neg_offset,unique)   
	n[23]: offset[2]     n[22] => _63 @ bb29[20]: fn exercise_allocator; (no mut,load n[25],does flow to pos_offset,no flow to neg_offset,unique)   
	n[24]: field.0       n[23] => _62 @ bb31[2]:  fn exercise_allocator; (no mut,load n[25],no flow to pos_offset,no flow to neg_offset,unique)     
	n[25]: addr.load     n[24] => _   @ bb31[2]:  fn exercise_allocator; (no mut,load n[25],no flow to pos_offset,no flow to neg_offset,unique)     
	n[26]: copy          n[1]  => _73 @ bb39[7]:  fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)        
	n[27]: copy          n[26] => _72 @ bb39[8]:  fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)        
	n[28]: free          n[27] => _71 @ bb39[9]:  fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)        
}
nodes_that_need_write = [13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]

Graph:
 g {
	n[0]: &_61 _    => _60 @ bb29[7]:  fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy n[0] => _59 @ bb29[8]:  fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: copy n[1] => _58 @ bb29[10]: fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[3]: copy n[2] => _1  @ bb0[0]:   fn printf; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)            
}
nodes_that_need_write = []

Graph:
 g {
	n[0]:  malloc(n = 1) _     => _74  @ bb41[2]:  fn exercise_allocator; (mut n[17],load n[33],does flow to pos_offset,no flow to neg_offset,unique)
	n[1]:  copy          n[0]  => _1   @ bb42[3]:  fn exercise_allocator; (mut n[17],load n[33],does flow to pos_offset,no flow to neg_offset,unique)
	n[2]:  copy          n[1]  => _79  @ bb42[7]:  fn exercise_allocator; (mut n[5],no load,no flow to pos_offset,no flow to neg_offset,unique)      
	n[3]:  offset[0]     n[2]  => _78  @ bb42[7]:  fn exercise_allocator; (mut n[5],no load,no flow to pos_offset,no flow to neg_offset,unique)      
	n[4]:  field.0       n[3]  => _    @ bb43[1]:  fn exercise_allocator; (mut n[5],no load,no flow to pos_offset,no flow to neg_offset,unique)      
	n[5]:  addr.store    n[4]  => _    @ bb43[1]:  fn exercise_allocator; (mut n[5],no load,no flow to pos_offset,no flow to neg_offset,unique)      
	n[6]:  copy          n[1]  => _81  @ bb43[6]:  fn exercise_allocator; (mut n[9],no load,does flow to pos_offset,no flow to neg_offset,unique)    
	n[7]:  offset[1]     n[6]  => _80  @ bb43[6]:  fn exercise_allocator; (mut n[9],no load,does flow to pos_offset,no flow to neg_offset,unique)    
	n[8]:  field.0       n[7]  => _    @ bb44[1]:  fn exercise_allocator; (mut n[9],no load,no flow to pos_offset,no flow to neg_offset,unique)      
	n[9]:  addr.store    n[8]  => _    @ bb44[1]:  fn exercise_allocator; (mut n[9],no load,no flow to pos_offset,no flow to neg_offset,unique)      
	n[10]: copy          n[1]  => _83  @ bb44[6]:  fn exercise_allocator; (mut n[13],no load,does flow to pos_offset,no flow to neg_offset,unique)   
	n[11]: offset[2]     n[10] => _82  @ bb44[6]:  fn exercise_allocator; (mut n[13],no load,does flow to pos_offset,no flow to neg_offset,unique)   
	n[12]: field.0       n[11] => _    @ bb45[1]:  fn exercise_allocator; (mut n[13],no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[13]: addr.store    n[12] => _    @ bb45[1]:  fn exercise_allocator; (mut n[13],no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[14]: copy          n[1]  => _85  @ bb45[6]:  fn exercise_allocator; (mut n[17],no load,does flow to pos_offset,no flow to neg_offset,unique)   
	n[15]: offset[3]     n[14] => _84  @ bb45[6]:  fn exercise_allocator; (mut n[17],no load,does flow to pos_offset,no flow to neg_offset,unique)   
	n[16]: field.0       n[15] => _    @ bb46[1]:  fn exercise_allocator; (mut n[17],no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[17]: addr.store    n[16] => _    @ bb46[1]:  fn exercise_allocator; (mut n[17],no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[18]: copy          n[1]  => _97  @ bb49[15]: fn exercise_allocator; (no mut,load n[21],no flow to pos_offset,no flow to neg_offset,unique)     
	n[19]: offset[0]     n[18] => _96  @ bb49[20]: fn exercise_allocator; (no mut,load n[21],no flow to pos_offset,no flow to neg_offset,unique)     
	n[20]: field.0       n[19] => _95  @ bb51[2]:  fn exercise_allocator; (no mut,load n[21],no flow to pos_offset,no flow to neg_offset,unique)     
	n[21]: addr.load     n[20] => _    @ bb51[2]:  fn exercise_allocator; (no mut,load n[21],no flow to pos_offset,no flow to neg_offset,unique)     
	n[22]: copy          n[1]  => _97  @ bb49[15]: fn exercise_allocator; (no mut,load n[25],does flow to pos_offset,no flow to neg_offset,unique)   
	n[23]: offset[1]     n[22] => _96  @ bb49[20]: fn exercise_allocator; (no mut,load n[25],does flow to pos_offset,no flow to neg_offset,unique)   
	n[24]: field.0       n[23] => _95  @ bb51[2]:  fn exercise_allocator; (no mut,load n[25],no flow to pos_offset,no flow to neg_offset,unique)     
	n[25]: addr.load     n[24] => _    @ bb51[2]:  fn exercise_allocator; (no mut,load n[25],no flow to pos_offset,no flow to neg_offset,unique)     
	n[26]: copy          n[1]  => _97  @ bb49[15]: fn exercise_allocator; (no mut,load n[29],does flow to pos_offset,no flow to neg_offset,unique)   
	n[27]: offset[2]     n[26] => _96  @ bb49[20]: fn exercise_allocator; (no mut,load n[29],does flow to pos_offset,no flow to neg_offset,unique)   
	n[28]: field.0       n[27] => _95  @ bb51[2]:  fn exercise_allocator; (no mut,load n[29],no flow to pos_offset,no flow to neg_offset,unique)     
	n[29]: addr.load     n[28] => _    @ bb51[2]:  fn exercise_allocator; (no mut,load n[29],no flow to pos_offset,no flow to neg_offset,unique)     
	n[30]: copy          n[1]  => _97  @ bb49[15]: fn exercise_allocator; (no mut,load n[33],does flow to pos_offset,no flow to neg_offset,unique)   
	n[31]: offset[3]     n[30] => _96  @ bb49[20]: fn exercise_allocator; (no mut,load n[33],does flow to pos_offset,no flow to neg_offset,unique)   
	n[32]: field.0       n[31] => _95  @ bb51[2]:  fn exercise_allocator; (no mut,load n[33],no flow to pos_offset,no flow to neg_offset,unique)     
	n[33]: addr.load     n[32] => _    @ bb51[2]:  fn exercise_allocator; (no mut,load n[33],no flow to pos_offset,no flow to neg_offset,unique)     
	n[34]: copy          n[1]  => _106 @ bb59[7]:  fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)        
	n[35]: copy          n[34] => _105 @ bb59[8]:  fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)        
	n[36]: free          n[35] => _104 @ bb59[9]:  fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)        
}
nodes_that_need_write = [17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]

Graph:
 g {
	n[0]: &_94 _    => _93 @ bb49[7]:  fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy n[0] => _92 @ bb49[8]:  fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: copy n[1] => _91 @ bb49[10]: fn exercise_allocator; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[3]: copy n[2] => _1  @ bb0[0]:   fn printf; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)            
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: malloc(n = 1) _    => _2  @ bb1[2]:  fn simple_analysis; (mut n[3],load n[5],no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy          n[0] => _1  @ bb2[2]:  fn simple_analysis; (mut n[3],load n[5],no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: field.0       n[1] => _   @ bb2[5]:  fn simple_analysis; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[3]: addr.store    n[2] => _   @ bb2[5]:  fn simple_analysis; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[4]: field.0       n[1] => _10 @ bb2[18]: fn simple_analysis; (no mut,load n[5],no flow to pos_offset,no flow to neg_offset,unique)  
	n[5]: addr.load     n[4] => _   @ bb2[18]: fn simple_analysis; (no mut,load n[5],no flow to pos_offset,no flow to neg_offset,unique)  
	n[6]: copy          n[1] => _13 @ bb3[8]:  fn simple_analysis; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
	n[7]: copy          n[6] => _12 @ bb3[9]:  fn simple_analysis; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
	n[8]: free          n[7] => _11 @ bb3[10]: fn simple_analysis; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
}
nodes_that_need_write = [3, 2, 1, 0]

Graph:
 g {
	n[0]: &_9  _    => _8 @ bb2[13]: fn simple_analysis; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy n[0] => _7 @ bb2[14]: fn simple_analysis; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: copy n[1] => _6 @ bb2[16]: fn simple_analysis; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[3]: copy n[2] => _1 @ bb0[0]:  fn printf; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)         
}
nodes_that_need_write = []

Graph:
 g {
	n[0]:  malloc(n = 1) _    => _2 @ bb1[2]:  fn analysis2; (mut n[3],load n[7],no flow to pos_offset,no flow to neg_offset,unique)     
	n[1]:  copy          n[0] => _1 @ bb2[2]:  fn analysis2; (mut n[3],load n[7],no flow to pos_offset,no flow to neg_offset,unique)     
	n[2]:  field.0       n[1] => _  @ bb2[5]:  fn analysis2; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)       
	n[3]:  addr.store    n[2] => _  @ bb2[5]:  fn analysis2; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)       
	n[4]:  copy          n[1] => _6 @ bb2[9]:  fn analysis2; (no mut,load n[7],no flow to pos_offset,no flow to neg_offset,unique)       
	n[5]:  copy          n[4] => _1 @ bb0[0]:  fn analysis2_helper; (no mut,load n[7],no flow to pos_offset,no flow to neg_offset,unique)
	n[6]:  field.0       n[5] => _7 @ bb0[12]: fn analysis2_helper; (no mut,load n[7],no flow to pos_offset,no flow to neg_offset,unique)
	n[7]:  addr.load     n[6] => _  @ bb0[12]: fn analysis2_helper; (no mut,load n[7],no flow to pos_offset,no flow to neg_offset,unique)
	n[8]:  copy          n[5] => _9 @ bb3[6]:  fn analysis2; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)         
	n[9]:  copy          n[8] => _8 @ bb3[7]:  fn analysis2; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)         
	n[10]: free          n[9] => _7 @ bb3[8]:  fn analysis2; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)         
}
nodes_that_need_write = [3, 2, 1, 0]

Graph:
 g {
	n[0]: &_6  _    => _5 @ bb0[7]:  fn analysis2_helper; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy n[0] => _4 @ bb0[8]:  fn analysis2_helper; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: copy n[1] => _3 @ bb0[10]: fn analysis2_helper; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[3]: copy n[2] => _1 @ bb0[0]:  fn printf; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)          
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: malloc(n = 1) _    => _0  @ bb0[2]:  fn malloc_wrapper; (mut n[4],load n[6],no flow to pos_offset,no flow to neg_offset,unique)         
	n[1]: copy          n[0] => _2  @ bb2[0]:  fn inter_function_analysis; (mut n[4],load n[6],no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: copy          n[1] => _1  @ bb2[2]:  fn inter_function_analysis; (mut n[4],load n[6],no flow to pos_offset,no flow to neg_offset,unique)
	n[3]: field.0       n[2] => _   @ bb2[5]:  fn inter_function_analysis; (mut n[4],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[4]: addr.store    n[3] => _   @ bb2[5]:  fn inter_function_analysis; (mut n[4],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[5]: field.0       n[2] => _10 @ bb2[18]: fn inter_function_analysis; (no mut,load n[6],no flow to pos_offset,no flow to neg_offset,unique)  
	n[6]: addr.load     n[5] => _   @ bb2[18]: fn inter_function_analysis; (no mut,load n[6],no flow to pos_offset,no flow to neg_offset,unique)  
	n[7]: copy          n[2] => _13 @ bb3[8]:  fn inter_function_analysis; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
	n[8]: copy          n[7] => _12 @ bb3[9]:  fn inter_function_analysis; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
	n[9]: free          n[8] => _11 @ bb3[10]: fn inter_function_analysis; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
}
nodes_that_need_write = [4, 3, 2, 1, 0]

Graph:
 g {
	n[0]: &_9  _    => _8 @ bb2[13]: fn inter_function_analysis; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy n[0] => _7 @ bb2[14]: fn inter_function_analysis; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: copy n[1] => _6 @ bb2[16]: fn inter_function_analysis; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[3]: copy n[2] => _1 @ bb0[0]:  fn printf; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)                 
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: malloc(n = 1) _    => _2       @ bb1[2]: fn no_owner; (mut n[1],no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: value.store   n[0] => _5.Deref @ bb2[4]: fn no_owner; (mut n[1],no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]:  copy       _    => _5  @ bb2[3]:  fn no_owner; (mut n[12],load n[5],no flow to pos_offset,no flow to neg_offset,unique)
	n[1]:  addr.store n[0] => _   @ bb2[3]:  fn no_owner; (mut n[1],no load,no flow to pos_offset,no flow to neg_offset,unique)   
	n[2]:  copy       _    => _5  @ bb2[3]:  fn no_owner; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[3]:  addr.store n[0] => _   @ bb2[3]:  fn no_owner; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)   
	n[4]:  copy       _    => _12 @ bb3[5]:  fn no_owner; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[5]:  addr.load  n[0] => _   @ bb3[5]:  fn no_owner; (no mut,load n[5],no flow to pos_offset,no flow to neg_offset,unique)   
	n[6]:  copy       _    => _6  @ bb2[10]: fn invalid; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)      
	n[7]:  addr.store n[0] => _   @ bb2[10]: fn invalid; (mut n[7],no load,no flow to pos_offset,no flow to neg_offset,unique)    
	n[8]:  copy       _    => _19 @ bb3[18]: fn invalid; (no mut,load n[10],no flow to pos_offset,no flow to neg_offset,unique)   
	n[9]:  field.0    n[8] => _18 @ bb3[18]: fn invalid; (no mut,load n[10],no flow to pos_offset,no flow to neg_offset,unique)   
	n[10]: addr.load  n[9] => _   @ bb3[18]: fn invalid; (no mut,load n[10],no flow to pos_offset,no flow to neg_offset,unique)   
	n[11]: copy       _    => _20 @ bb4[7]:  fn invalid; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)      
	n[12]: addr.store n[0] => _   @ bb4[7]:  fn invalid; (mut n[12],no load,no flow to pos_offset,no flow to neg_offset,unique)   
}
nodes_that_need_write = [12, 7, 3, 1, 0]

Graph:
 g {
	n[0]: malloc(n = 1) _    => _2       @ bb1[2]: fn no_owner; (mut n[1],no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: value.store   n[0] => _5.Deref @ bb2[4]: fn no_owner; (mut n[1],no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: value.load    _    => _11      @ bb3[6]: fn no_owner; (no mut,load n[2],no flow to pos_offset,no flow to neg_offset,unique)
	n[3]: copy          n[2] => _10      @ bb3[7]: fn no_owner; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[4]: free          n[3] => _9       @ bb3[8]: fn no_owner; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)  
}
nodes_that_need_write = []

Graph:
 g {
	n[0]:  malloc(n = 1) _    => _2       @ bb1[2]:  fn invalid; (mut n[5],load n[7],no flow to pos_offset,no flow to neg_offset,unique)
	n[1]:  copy          n[0] => _1       @ bb2[2]:  fn invalid; (mut n[5],load n[7],no flow to pos_offset,no flow to neg_offset,unique)
	n[2]:  field.0       n[1] => _        @ bb2[5]:  fn invalid; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[3]:  addr.store    n[2] => _        @ bb2[5]:  fn invalid; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[4]:  copy          n[1] => _5       @ bb2[8]:  fn invalid; (mut n[5],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[5]:  value.store   n[4] => _6.Deref @ bb2[11]: fn invalid; (mut n[5],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[6]:  field.0       n[1] => _12      @ bb2[25]: fn invalid; (no mut,load n[7],no flow to pos_offset,no flow to neg_offset,unique)  
	n[7]:  addr.load     n[6] => _        @ bb2[25]: fn invalid; (no mut,load n[7],no flow to pos_offset,no flow to neg_offset,unique)  
	n[8]:  copy          n[1] => _23      @ bb4[13]: fn invalid; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
	n[9]:  copy          n[8] => _22      @ bb4[14]: fn invalid; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
	n[10]: free          n[9] => _21      @ bb4[15]: fn invalid; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
}
nodes_that_need_write = [3, 2, 1, 0]

Graph:
 g {
	n[0]: &_11 _    => _10 @ bb2[20]: fn invalid; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy n[0] => _9  @ bb2[21]: fn invalid; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: copy n[1] => _8  @ bb2[23]: fn invalid; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[3]: copy n[2] => _1  @ bb0[0]:  fn printf; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique) 
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: &_17 _    => _16 @ bb3[11]: fn invalid; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy n[0] => _15 @ bb3[12]: fn invalid; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: copy n[1] => _14 @ bb3[14]: fn invalid; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[3]: copy n[2] => _1  @ bb0[0]:  fn printf; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique) 
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: copy _ => _4 @ bb0[8]: fn testing; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: &_4  _    => _3 @ bb0[10]: fn testing; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy n[0] => _5 @ bb0[13]: fn testing; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: copy _ => _7 @ bb0[16]: fn testing; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: &_7         _    => _6       @ bb0[18]: fn testing; (mut n[1],no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: value.store n[0] => _5.Deref @ bb0[19]: fn testing; (mut n[1],no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: addr.store _ => _ @ bb0[18]: fn testing; (mut n[0],no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = [0]

Graph:
 g {
	n[0]: malloc(n = 1) _    => _2  @ bb1[2]:  fn simple1; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy          n[0] => _1  @ bb2[2]:  fn simple1; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: copy          n[1] => _8  @ bb2[9]:  fn simple1; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[3]: copy          n[2] => _7  @ bb2[10]: fn simple1; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[4]: free          n[3] => _6  @ bb3[2]:  fn simple1; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[5]: copy          n[1] => _16 @ bb4[21]: fn simple1; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[6]: ptr_to_int    n[5] => _   @ bb4[21]: fn simple1; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[7]: copy          n[1] => _21 @ bb4[34]: fn simple1; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[8]: copy          n[7] => _20 @ bb4[35]: fn simple1; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[9]: free          n[8] => _19 @ bb4[36]: fn simple1; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: malloc(n = 1) _    => _6  @ bb3[2]:  fn simple1; (mut n[4],no load,no flow to pos_offset,no flow to neg_offset,unique)                   
	n[1]: copy          n[0] => _5  @ bb4[3]:  fn simple1; (mut n[4],no load,no flow to pos_offset,no flow to neg_offset,unique)                   
	n[2]: copy          n[1] => _11 @ bb4[7]:  fn simple1; (mut n[4],no load,no flow to pos_offset,no flow to neg_offset,non unique proven by n[5])
	n[3]: field.0       n[2] => _   @ bb4[8]:  fn simple1; (mut n[4],no load,no flow to pos_offset,no flow to neg_offset,unique)                   
	n[4]: addr.store    n[3] => _   @ bb4[8]:  fn simple1; (mut n[4],no load,no flow to pos_offset,no flow to neg_offset,unique)                   
	n[5]: copy          n[1] => _12 @ bb4[11]: fn simple1; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)                     
	n[6]: copy          n[2] => _13 @ bb4[14]: fn simple1; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)                     
	n[7]: int_to_ptr    _    => _17 @ bb4[28]: fn simple1; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)                     
}
nodes_that_need_write = [4, 3, 2, 1, 0]

Graph:
 g {
	n[0]: &_13 _ => _14 @ bb4[17]: fn simple1; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: malloc(n = 1) _    => _1 @ bb1[2]: fn test_malloc_free; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy          n[0] => _5 @ bb2[5]: fn test_malloc_free; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: free          n[1] => _4 @ bb2[5]: fn test_malloc_free; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: malloc(n = 1) _    => _2 @ bb1[2]:  fn test_malloc_free_cast; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy          n[0] => _1 @ bb2[2]:  fn test_malloc_free_cast; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: copy          n[1] => _7 @ bb2[8]:  fn test_malloc_free_cast; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[3]: copy          n[2] => _6 @ bb2[9]:  fn test_malloc_free_cast; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[4]: free          n[3] => _5 @ bb2[10]: fn test_malloc_free_cast; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: malloc(n = 1) _    => _1 @ bb1[2]: fn test_arg; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy          n[0] => _5 @ bb2[5]: fn test_arg; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: copy          n[1] => _1 @ bb0[0]: fn foo; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[3]: copy          n[2] => _2 @ bb0[2]: fn foo; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[4]: copy          n[2] => _6 @ bb3[4]: fn test_arg; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]:  malloc(n = 1) _     => _1  @ bb1[2]: fn test_arg_rec; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]:  copy          n[0]  => _5  @ bb2[5]: fn test_arg_rec; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]:  copy          n[1]  => _2  @ bb0[0]: fn foo_rec; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[3]:  copy          n[2]  => _11 @ bb3[4]: fn foo_rec; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[4]:  copy          n[3]  => _2  @ bb0[0]: fn foo_rec; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[5]:  copy          n[4]  => _11 @ bb3[4]: fn foo_rec; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[6]:  copy          n[5]  => _2  @ bb0[0]: fn foo_rec; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[7]:  copy          n[6]  => _11 @ bb3[4]: fn foo_rec; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[8]:  copy          n[7]  => _2  @ bb0[0]: fn foo_rec; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[9]:  copy          n[8]  => _0  @ bb8[3]: fn foo_rec; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[10]: copy          n[9]  => _7  @ bb4[0]: fn foo_rec; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[11]: copy          n[10] => _12 @ bb4[5]: fn foo_rec; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[12]: copy          n[11] => _0  @ bb4[7]: fn foo_rec; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[13]: copy          n[12] => _7  @ bb4[0]: fn foo_rec; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[14]: copy          n[13] => _12 @ bb4[5]: fn foo_rec; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[15]: copy          n[14] => _0  @ bb4[7]: fn foo_rec; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[16]: copy          n[15] => _7  @ bb4[0]: fn foo_rec; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[17]: copy          n[16] => _12 @ bb4[5]: fn foo_rec; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[18]: copy          n[17] => _0  @ bb4[7]: fn foo_rec; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[19]: copy          n[18] => _4  @ bb3[0]: fn test_arg_rec; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: malloc(n = 1) _    => _1 @ bb1[2]: fn test_realloc_reassign; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy          n[0] => _5 @ bb2[5]: fn test_realloc_reassign; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: free          n[1] => _4 @ bb4[2]: fn test_realloc_reassign; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: malloc(n = 1) _    => _4  @ bb4[2]: fn test_realloc_reassign; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy          n[0] => _1  @ bb5[3]: fn test_realloc_reassign; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: copy          n[1] => _11 @ bb5[7]: fn test_realloc_reassign; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[3]: free          n[2] => _10 @ bb5[7]: fn test_realloc_reassign; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: malloc(n = 1) _    => _1 @ bb1[2]: fn test_realloc_fresh; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy          n[0] => _5 @ bb2[5]: fn test_realloc_fresh; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: free          n[1] => _4 @ bb3[2]: fn test_realloc_fresh; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: malloc(n = 1) _    => _4 @ bb3[2]: fn test_realloc_fresh; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy          n[0] => _9 @ bb4[6]: fn test_realloc_fresh; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: free          n[1] => _8 @ bb4[6]: fn test_realloc_fresh; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: malloc(n = 1) _    => _2 @ bb1[2]:  fn test_load_addr; (no mut,load n[2],no flow to pos_offset,no flow to neg_offset,unique)                 
	n[1]: copy          n[0] => _1 @ bb2[2]:  fn test_load_addr; (no mut,no load,no flow to pos_offset,no flow to neg_offset,non unique proven by n[2])
	n[2]: addr.load     n[0] => _  @ bb2[5]:  fn test_load_addr; (no mut,load n[2],no flow to pos_offset,no flow to neg_offset,unique)                 
	n[3]: copy          n[1] => _8 @ bb2[11]: fn test_load_addr; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)                   
	n[4]: copy          n[3] => _7 @ bb2[12]: fn test_load_addr; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)                   
	n[5]: free          n[4] => _6 @ bb2[13]: fn test_load_addr; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)                   
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: malloc(n = 1) _ => _1 @ bb1[2]: fn test_overwrite; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: malloc(n = 1) _    => _4 @ bb3[2]: fn test_overwrite; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy          n[0] => _7 @ bb4[4]: fn test_overwrite; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: copy          n[1] => _1 @ bb4[5]: fn test_overwrite; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[3]: copy          n[2] => _9 @ bb4[9]: fn test_overwrite; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[4]: free          n[3] => _8 @ bb4[9]: fn test_overwrite; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: malloc(n = 1) _    => _2 @ bb1[2]:  fn test_store_addr; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy          n[0] => _1 @ bb2[2]:  fn test_store_addr; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: field.0       n[1] => _  @ bb2[4]:  fn test_store_addr; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[3]: addr.store    n[2] => _  @ bb2[4]:  fn test_store_addr; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[4]: copy          n[1] => _7 @ bb2[9]:  fn test_store_addr; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[5]: copy          n[4] => _6 @ bb2[10]: fn test_store_addr; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[6]: free          n[5] => _5 @ bb2[11]: fn test_store_addr; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)  
}
nodes_that_need_write = [3, 2, 1, 0]

Graph:
 g {
	n[0]: malloc(n = 1) _    => _2  @ bb1[2]:  fn test_load_other_store_self; (mut n[3],load n[5],no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy          n[0] => _1  @ bb2[2]:  fn test_load_other_store_self; (mut n[3],load n[5],no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: field.0       n[1] => _   @ bb4[4]:  fn test_load_other_store_self; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[3]: addr.store    n[2] => _   @ bb4[4]:  fn test_load_other_store_self; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[4]: field.0       n[1] => _9  @ bb4[6]:  fn test_load_other_store_self; (no mut,load n[5],no flow to pos_offset,no flow to neg_offset,unique)  
	n[5]: addr.load     n[4] => _   @ bb4[6]:  fn test_load_other_store_self; (no mut,load n[5],no flow to pos_offset,no flow to neg_offset,unique)  
	n[6]: copy          n[1] => _12 @ bb4[13]: fn test_load_other_store_self; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
	n[7]: copy          n[6] => _11 @ bb4[14]: fn test_load_other_store_self; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
	n[8]: free          n[7] => _10 @ bb4[15]: fn test_load_other_store_self; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
}
nodes_that_need_write = [3, 2, 1, 0]

Graph:
 g {
	n[0]: malloc(n = 1) _    => _6  @ bb3[2]: fn test_load_other_store_self; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy          n[0] => _5  @ bb4[2]: fn test_load_other_store_self; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: field.0       n[1] => _   @ bb4[7]: fn test_load_other_store_self; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[3]: addr.store    n[2] => _   @ bb4[7]: fn test_load_other_store_self; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[4]: copy          n[1] => _15 @ bb5[6]: fn test_load_other_store_self; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[5]: copy          n[4] => _14 @ bb5[7]: fn test_load_other_store_self; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[6]: free          n[5] => _13 @ bb5[8]: fn test_load_other_store_self; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)  
}
nodes_that_need_write = [3, 2, 1, 0]

Graph:
 g {
	n[0]:  malloc(n = 1) _    => _2 @ bb1[2]:  fn test_load_self_store_self; (mut n[7],load n[4],no flow to pos_offset,no flow to neg_offset,unique)
	n[1]:  copy          n[0] => _1 @ bb2[3]:  fn test_load_self_store_self; (mut n[7],load n[4],no flow to pos_offset,no flow to neg_offset,unique)
	n[2]:  field.3       n[1] => _  @ bb2[6]:  fn test_load_self_store_self; (no mut,load n[4],no flow to pos_offset,no flow to neg_offset,unique)  
	n[3]:  field.3       n[2] => _6 @ bb2[6]:  fn test_load_self_store_self; (no mut,load n[4],no flow to pos_offset,no flow to neg_offset,unique)  
	n[4]:  addr.load     n[3] => _  @ bb2[6]:  fn test_load_self_store_self; (no mut,load n[4],no flow to pos_offset,no flow to neg_offset,unique)  
	n[5]:  field.3       n[1] => _  @ bb2[7]:  fn test_load_self_store_self; (mut n[7],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[6]:  field.3       n[5] => _  @ bb2[7]:  fn test_load_self_store_self; (mut n[7],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[7]:  addr.store    n[6] => _  @ bb2[7]:  fn test_load_self_store_self; (mut n[7],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[8]:  copy          n[1] => _9 @ bb2[13]: fn test_load_self_store_self; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
	n[9]:  copy          n[8] => _8 @ bb2[14]: fn test_load_self_store_self; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
	n[10]: free          n[9] => _7 @ bb2[15]: fn test_load_self_store_self; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
}
nodes_that_need_write = [7, 6, 5, 1, 0]

Graph:
 g {
	n[0]: malloc(n = 1) _    => _2  @ bb1[2]:  fn test_load_self_store_self_inter; (mut n[5],load n[3],no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy          n[0] => _1  @ bb2[3]:  fn test_load_self_store_self_inter; (mut n[5],load n[3],no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: field.0       n[1] => _6  @ bb2[6]:  fn test_load_self_store_self_inter; (no mut,load n[3],no flow to pos_offset,no flow to neg_offset,unique)  
	n[3]: addr.load     n[2] => _   @ bb2[6]:  fn test_load_self_store_self_inter; (no mut,load n[3],no flow to pos_offset,no flow to neg_offset,unique)  
	n[4]: field.0       n[1] => _   @ bb2[10]: fn test_load_self_store_self_inter; (mut n[5],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[5]: addr.store    n[4] => _   @ bb2[10]: fn test_load_self_store_self_inter; (mut n[5],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[6]: copy          n[1] => _10 @ bb2[16]: fn test_load_self_store_self_inter; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
	n[7]: copy          n[6] => _9  @ bb2[17]: fn test_load_self_store_self_inter; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
	n[8]: free          n[7] => _8  @ bb2[18]: fn test_load_self_store_self_inter; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
}
nodes_that_need_write = [5, 4, 1, 0]

Graph:
 g {
	n[0]: malloc(n = 1) _    => _1 @ bb1[2]:  fn test_ptr_int_ptr; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy          n[0] => _5 @ bb2[5]:  fn test_ptr_int_ptr; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: ptr_to_int    n[1] => _  @ bb2[5]:  fn test_ptr_int_ptr; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[3]: int_to_ptr    _    => _1 @ bb2[11]: fn test_ptr_int_ptr; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[4]: copy          n[3] => _8 @ bb2[15]: fn test_ptr_int_ptr; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[5]: free          n[4] => _7 @ bb2[15]: fn test_ptr_int_ptr; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: malloc(n = 1) _    => _1 @ bb1[2]: fn test_load_value; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[1]: value.load    _    => _6 @ bb2[8]: fn test_load_value; (no mut,load n[1],no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: free          n[1] => _5 @ bb2[8]: fn test_load_value; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)  
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: &_1       _    => _4 @ bb2[4]: fn test_load_value; (no mut,load n[1],no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: addr.load n[0] => _  @ bb2[7]: fn test_load_value; (no mut,load n[1],no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: malloc(n = 1) _    => _1       @ bb1[2]:  fn test_store_value; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy          n[0] => _4       @ bb2[4]:  fn test_store_value; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: copy          n[1] => _6       @ bb2[10]: fn test_store_value; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[3]: value.store   n[2] => _5.Deref @ bb2[11]: fn test_store_value; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[4]: copy          n[0] => _8       @ bb2[15]: fn test_store_value; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[5]: free          n[4] => _7       @ bb2[15]: fn test_store_value; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)  
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: &_1        _    => _5 @ bb2[7]:  fn test_store_value; (mut n[1],no load,no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: addr.store n[0] => _  @ bb2[10]: fn test_store_value; (mut n[1],no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = [1, 0]

Graph:
 g {
	n[0]:  malloc(n = 1) _    => _2                @ bb1[2]:  fn test_store_value_field; (mut n[6],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[1]:  copy          n[0] => _1                @ bb2[2]:  fn test_store_value_field; (mut n[6],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[2]:  copy          n[1] => _9                @ bb4[6]:  fn test_store_value_field; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[3]:  value.store   n[2] => _5.Deref.Field(2) @ bb4[7]:  fn test_store_value_field; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[4]:  value.load    _    => _10               @ bb4[10]: fn test_store_value_field; (mut n[7],load n[4],no flow to pos_offset,no flow to neg_offset,unique)
	n[5]:  field.2       n[1] => _                 @ bb4[10]: fn test_store_value_field; (mut n[6],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[6]:  addr.store    n[5] => _                 @ bb4[10]: fn test_store_value_field; (mut n[6],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[7]:  value.store   n[4] => _1.Deref.Field(2) @ bb4[11]: fn test_store_value_field; (mut n[7],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[8]:  copy          n[1] => _13               @ bb4[16]: fn test_store_value_field; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
	n[9]:  copy          n[8] => _12               @ bb4[17]: fn test_store_value_field; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
	n[10]: free          n[9] => _11               @ bb4[18]: fn test_store_value_field; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
}
nodes_that_need_write = [6, 5, 1, 0]

Graph:
 g {
	n[0]: malloc(n = 1) _    => _6  @ bb3[2]: fn test_store_value_field; (mut n[3],load n[5],no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: copy          n[0] => _5  @ bb4[2]: fn test_store_value_field; (mut n[3],load n[5],no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: field.2       n[1] => _   @ bb4[6]: fn test_store_value_field; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[3]: addr.store    n[2] => _   @ bb4[6]: fn test_store_value_field; (mut n[3],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[4]: field.2       n[1] => _10 @ bb4[9]: fn test_store_value_field; (no mut,load n[5],no flow to pos_offset,no flow to neg_offset,unique)  
	n[5]: addr.load     n[4] => _   @ bb4[9]: fn test_store_value_field; (no mut,load n[5],no flow to pos_offset,no flow to neg_offset,unique)  
}
nodes_that_need_write = [3, 2, 1, 0]

Graph:
 g {
	n[0]: malloc(n = 1) _    => _1       @ bb1[2]:  fn test_load_value_store_value; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
	n[1]: value.load    _    => _5       @ bb2[7]:  fn test_load_value_store_value; (mut n[2],load n[1],no flow to pos_offset,no flow to neg_offset,unique)
	n[2]: value.store   n[1] => _4.Deref @ bb2[8]:  fn test_load_value_store_value; (mut n[2],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[3]: value.load    _    => _7       @ bb2[12]: fn test_load_value_store_value; (no mut,load n[3],no flow to pos_offset,no flow to neg_offset,unique)  
	n[4]: free          n[3] => _6       @ bb2[12]: fn test_load_value_store_value; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)    
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: &_1        _    => _4 @ bb2[4]:  fn test_load_value_store_value; (mut n[2],load n[3],no flow to pos_offset,no flow to neg_offset,unique)
	n[1]: addr.load  n[0] => _  @ bb2[6]:  fn test_load_value_store_value; (no mut,load n[1],no flow to pos_offset,no flow to neg_offset,unique)  
	n[2]: addr.store n[0] => _  @ bb2[7]:  fn test_load_value_store_value; (mut n[2],no load,no flow to pos_offset,no flow to neg_offset,unique)  
	n[3]: addr.load  n[0] => _  @ bb2[11]: fn test_load_value_store_value; (no mut,load n[3],no flow to pos_offset,no flow to neg_offset,unique)  
}
nodes_that_need_write = [2, 0]

Graph:
 g {
	n[0]: copy _ => _31 @ bb27[4]: fn main_0; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]: copy _ => _37 @ bb27[12]: fn main_0; (no mut,no load,no flow to pos_offset,no flow to neg_offset,unique)
}
nodes_that_need_write = []

Graph:
 g {
	n[0]:  &_31       _     => _39 @ bb28[6]:  fn main_0; (mut n[71],load n[68],does flow to pos_offset,no flow to neg_offset,unique)        
	n[1]:  copy       n[0]  => _38 @ bb28[7]:  fn main_0; (mut n[71],load n[68],does flow to pos_offset,no flow to neg_offset,unique)        
	n[2]:  copy       n[1]  => _2  @ bb0[0]:   fn insertion_sort; (mut n[71],load n[68],does flow to pos_offset,no flow to neg_offset,unique)
	n[3]:  copy       n[2]  => _10 @ bb3[4]:   fn insertion_sort; (no mut,load n[5],does flow to pos_offset,no flow to neg_offset,unique)    
	n[4]:  offset[1]  n[3]  => _9  @ bb3[9]:   fn insertion_sort; (no mut,load n[5],does flow to pos_offset,no flow to neg_offset,unique)    
	n[5]:  addr.load  n[4]  => _   @ bb5[2]:   fn insertion_sort; (no mut,load n[5],no flow to pos_offset,no flow to neg_offset,unique)      
	n[6]:  copy       n[2]  => _22 @ bb9[5]:   fn insertion_sort; (no mut,load n[8],no flow to pos_offset,no flow to neg_offset,unique)      
	n[7]:  offset[0]  n[6]  => _21 @ bb11[5]:  fn insertion_sort; (no mut,load n[8],no flow to pos_offset,no flow to neg_offset,unique)      
	n[8]:  addr.load  n[7]  => _   @ bb12[2]:  fn insertion_sort; (no mut,load n[8],no flow to pos_offset,no flow to neg_offset,unique)      
	n[9]:  copy       n[2]  => _47 @ bb24[8]:  fn insertion_sort; (mut n[11],no load,does flow to pos_offset,no flow to neg_offset,unique)   
	n[10]: offset[1]  n[9]  => _46 @ bb24[13]: fn insertion_sort; (mut n[11],no load,does flow to pos_offset,no flow to neg_offset,unique)   
	n[11]: addr.store n[10] => _   @ bb25[2]:  fn insertion_sort; (mut n[11],no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[12]: copy       n[2]  => _10 @ bb3[4]:   fn insertion_sort; (no mut,load n[14],does flow to pos_offset,no flow to neg_offset,unique)   
	n[13]: offset[2]  n[12] => _9  @ bb3[9]:   fn insertion_sort; (no mut,load n[14],does flow to pos_offset,no flow to neg_offset,unique)   
	n[14]: addr.load  n[13] => _   @ bb5[2]:   fn insertion_sort; (no mut,load n[14],no flow to pos_offset,no flow to neg_offset,unique)     
	n[15]: copy       n[2]  => _22 @ bb9[5]:   fn insertion_sort; (no mut,load n[17],does flow to pos_offset,no flow to neg_offset,unique)   
	n[16]: offset[1]  n[15] => _21 @ bb11[5]:  fn insertion_sort; (no mut,load n[17],does flow to pos_offset,no flow to neg_offset,unique)   
	n[17]: addr.load  n[16] => _   @ bb12[2]:  fn insertion_sort; (no mut,load n[17],no flow to pos_offset,no flow to neg_offset,unique)     
	n[18]: copy       n[2]  => _31 @ bb13[4]:  fn insertion_sort; (no mut,load n[20],does flow to pos_offset,no flow to neg_offset,unique)   
	n[19]: offset[1]  n[18] => _30 @ bb15[5]:  fn insertion_sort; (no mut,load n[20],does flow to pos_offset,no flow to neg_offset,unique)   
	n[20]: addr.load  n[19] => _   @ bb16[2]:  fn insertion_sort; (no mut,load n[20],no flow to pos_offset,no flow to neg_offset,unique)     
	n[21]: copy       n[2]  => _38 @ bb16[6]:  fn insertion_sort; (mut n[23],no load,does flow to pos_offset,no flow to neg_offset,unique)   
	n[22]: offset[2]  n[21] => _37 @ bb16[11]: fn insertion_sort; (mut n[23],no load,does flow to pos_offset,no flow to neg_offset,unique)   
	n[23]: addr.store n[22] => _   @ bb17[2]:  fn insertion_sort; (mut n[23],no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[24]: copy       n[2]  => _22 @ bb9[5]:   fn insertion_sort; (no mut,load n[26],no flow to pos_offset,no flow to neg_offset,unique)     
	n[25]: offset[0]  n[24] => _21 @ bb11[5]:  fn insertion_sort; (no mut,load n[26],no flow to pos_offset,no flow to neg_offset,unique)     
	n[26]: addr.load  n[25] => _   @ bb12[2]:  fn insertion_sort; (no mut,load n[26],no flow to pos_offset,no flow to neg_offset,unique)     
	n[27]: copy       n[2]  => _47 @ bb24[8]:  fn insertion_sort; (mut n[29],no load,does flow to pos_offset,no flow to neg_offset,unique)   
	n[28]: offset[1]  n[27] => _46 @ bb24[13]: fn insertion_sort; (mut n[29],no load,does flow to pos_offset,no flow to neg_offset,unique)   
	n[29]: addr.store n[28] => _   @ bb25[2]:  fn insertion_sort; (mut n[29],no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[30]: copy       n[2]  => _10 @ bb3[4]:   fn insertion_sort; (no mut,load n[32],does flow to pos_offset,no flow to neg_offset,unique)   
	n[31]: offset[3]  n[30] => _9  @ bb3[9]:   fn insertion_sort; (no mut,load n[32],does flow to pos_offset,no flow to neg_offset,unique)   
	n[32]: addr.load  n[31] => _   @ bb5[2]:   fn insertion_sort; (no mut,load n[32],no flow to pos_offset,no flow to neg_offset,unique)     
	n[33]: copy       n[2]  => _22 @ bb9[5]:   fn insertion_sort; (no mut,load n[35],does flow to pos_offset,no flow to neg_offset,unique)   
	n[34]: offset[2]  n[33] => _21 @ bb11[5]:  fn insertion_sort; (no mut,load n[35],does flow to pos_offset,no flow to neg_offset,unique)   
	n[35]: addr.load  n[34] => _   @ bb12[2]:  fn insertion_sort; (no mut,load n[35],no flow to pos_offset,no flow to neg_offset,unique)     
	n[36]: copy       n[2]  => _31 @ bb13[4]:  fn insertion_sort; (no mut,load n[38],does flow to pos_offset,no flow to neg_offset,unique)   
	n[37]: offset[2]  n[36] => _30 @ bb15[5]:  fn insertion_sort; (no mut,load n[38],does flow to pos_offset,no flow to neg_offset,unique)   
	n[38]: addr.load  n[37] => _   @ bb16[2]:  fn insertion_sort; (no mut,load n[38],no flow to pos_offset,no flow to neg_offset,unique)     
	n[39]: copy       n[2]  => _38 @ bb16[6]:  fn insertion_sort; (mut n[41],no load,does flow to pos_offset,no flow to neg_offset,unique)   
	n[40]: offset[3]  n[39] => _37 @ bb16[11]: fn insertion_sort; (mut n[41],no load,does flow to pos_offset,no flow to neg_offset,unique)   
	n[41]: addr.store n[40] => _   @ bb17[2]:  fn insertion_sort; (mut n[41],no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[42]: copy       n[2]  => _22 @ bb9[5]:   fn insertion_sort; (no mut,load n[44],does flow to pos_offset,no flow to neg_offset,unique)   
	n[43]: offset[1]  n[42] => _21 @ bb11[5]:  fn insertion_sort; (no mut,load n[44],does flow to pos_offset,no flow to neg_offset,unique)   
	n[44]: addr.load  n[43] => _   @ bb12[2]:  fn insertion_sort; (no mut,load n[44],no flow to pos_offset,no flow to neg_offset,unique)     
	n[45]: copy       n[2]  => _31 @ bb13[4]:  fn insertion_sort; (no mut,load n[47],does flow to pos_offset,no flow to neg_offset,unique)   
	n[46]: offset[1]  n[45] => _30 @ bb15[5]:  fn insertion_sort; (no mut,load n[47],does flow to pos_offset,no flow to neg_offset,unique)   
	n[47]: addr.load  n[46] => _   @ bb16[2]:  fn insertion_sort; (no mut,load n[47],no flow to pos_offset,no flow to neg_offset,unique)     
	n[48]: copy       n[2]  => _38 @ bb16[6]:  fn insertion_sort; (mut n[50],no load,does flow to pos_offset,no flow to neg_offset,unique)   
	n[49]: offset[2]  n[48] => _37 @ bb16[11]: fn insertion_sort; (mut n[50],no load,does flow to pos_offset,no flow to neg_offset,unique)   
	n[50]: addr.store n[49] => _   @ bb17[2]:  fn insertion_sort; (mut n[50],no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[51]: copy       n[2]  => _22 @ bb9[5]:   fn insertion_sort; (no mut,load n[53],no flow to pos_offset,no flow to neg_offset,unique)     
	n[52]: offset[0]  n[51] => _21 @ bb11[5]:  fn insertion_sort; (no mut,load n[53],no flow to pos_offset,no flow to neg_offset,unique)     
	n[53]: addr.load  n[52] => _   @ bb12[2]:  fn insertion_sort; (no mut,load n[53],no flow to pos_offset,no flow to neg_offset,unique)     
	n[54]: copy       n[2]  => _31 @ bb13[4]:  fn insertion_sort; (no mut,load n[56],no flow to pos_offset,no flow to neg_offset,unique)     
	n[55]: offset[0]  n[54] => _30 @ bb15[5]:  fn insertion_sort; (no mut,load n[56],no flow to pos_offset,no flow to neg_offset,unique)     
	n[56]: addr.load  n[55] => _   @ bb16[2]:  fn insertion_sort; (no mut,load n[56],no flow to pos_offset,no flow to neg_offset,unique)     
	n[57]: copy       n[2]  => _38 @ bb16[6]:  fn insertion_sort; (mut n[59],no load,does flow to pos_offset,no flow to neg_offset,unique)   
	n[58]: offset[1]  n[57] => _37 @ bb16[11]: fn insertion_sort; (mut n[59],no load,does flow to pos_offset,no flow to neg_offset,unique)   
	n[59]: addr.store n[58] => _   @ bb17[2]:  fn insertion_sort; (mut n[59],no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[60]: copy       n[2]  => _47 @ bb24[8]:  fn insertion_sort; (mut n[62],no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[61]: offset[0]  n[60] => _46 @ bb24[13]: fn insertion_sort; (mut n[62],no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[62]: addr.store n[61] => _   @ bb25[2]:  fn insertion_sort; (mut n[62],no load,no flow to pos_offset,no flow to neg_offset,unique)     
	n[63]: copy       n[2]  => _10 @ bb3[4]:   fn insertion_sort; (no mut,load n[65],does flow to pos_offset,no flow to neg_offset,unique)   
	n[64]: offset[4]  n[63] => _9  @ bb3[9]:   fn insertion_sort; (no mut,load n[65],does flow to pos_offset,no flow to neg_offset,unique)   
	n[65]: addr.load  n[64] => _   @ bb5[2]:   fn insertion_sort; (no mut,load n[65],no flow to pos_offset,no flow to neg_offset,unique)     
	n[66]: copy       n[2]  => _22 @ bb9[5]:   fn insertion_sort; (no mut,load n[68],does flow to pos_offset,no flow to neg_offset,unique)   
	n[67]: offset[3]  n[66] => _21 @ bb11[5]:  fn insertion_sort; (no mut,load n[68],does flow to pos_offset,no flow to neg_offset,unique)   
	n[68]: addr.load  n[67] => _   @ bb12[2]:  fn insertion_sort; (no mut,load n[68],no flow to pos_offset,no flow to neg_offset,unique)     
	n[69]: copy       n[2]  => _47 @ bb24[8]:  fn insertion_sort; (mut n[71],no load,does flow to pos_offset,no flow to neg_offset,unique)   
	n[70]: offset[4]  n[69] => _46 @ bb24[13]: fn insertion_sort; (mut n[71],no load,does flow to pos_offset,no flow to neg_offset,unique)   
	n[71]: addr.store n[70] => _   @ bb25[2]:  fn insertion_sort; (mut n[71],no load,no flow to pos_offset,no flow to neg_offset,unique)     
}
nodes_that_need_write = [71, 70, 69, 62, 61, 60, 59, 58, 57, 50, 49, 48, 41, 40, 39, 29, 28, 27, 23, 22, 21, 11, 10, 9, 2, 1, 0]

num_graphs = 77
num_nodes = 502

